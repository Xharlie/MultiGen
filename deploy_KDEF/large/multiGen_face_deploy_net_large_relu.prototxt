# deconv: output_size = (input_size - 1) * stride + kernel_size - 2 * pad
name: "DeconvMultiGenFaceNet"
#layer {
#  name: "data"
#  type: "HDF5Data"
#  top: "data"
#  top: "person"
#  top: "emotion"
#  top: "transform"
#  hdf5_data_param {
#    source: "../../Source/MMI/all_info_large.txt"
#    batch_size: 8
#    shuffle : true
#  }
#}
layer {
    name: "person"
    type: "Input"
    top: "person"
    input_param {
        shape: {
            dim: 1
            dim: 7
        }
    }
}

layer {
    name: "emotion"
    type: "Input"
    top: "emotion"
    input_param {
        shape: {
            dim: 1
            dim: 7
        }
    }
}

layer {
    name: "transform"
    type: "Input"
    top: "transform"
    input_param {
        shape: {
            dim: 1
            dim: 6
        }
    }
}

layer {
  name: "fc1_person"
  type: "InnerProduct"
  bottom: "person"
  top: "fc1_person"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1_person"
  type: "ReLU"
  bottom: "fc1_person"
  top: "fc1_person"
   relu_param {
     negative_slope: 0.1
   }
}
layer {
  name: "fc2_person"
  type: "InnerProduct"
  bottom: "fc1_person"
  top: "fc2_person"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_person"
  type: "ReLU"
  bottom: "fc2_person"
  top: "fc2_person"
  relu_param {
     negative_slope: 0.1
   }
}

layer {
  name: "fc1_emotion"
  type: "InnerProduct"
  bottom: "emotion"
  top: "fc1_emotion"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_emotion"
  type: "ReLU"
  bottom: "fc1_emotion"
  top: "fc1_emotion"
   relu_param {
     negative_slope: 0.1
   }
}
layer {
  name: "fc2_emotion"
  type: "InnerProduct"
  bottom: "fc1_emotion"
  top: "fc2_emotion"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_emotion"
  type: "ReLU"
  bottom: "fc2_emotion"
  top: "fc2_emotion"
   relu_param {
     negative_slope: 0.1
   }
}
#
#layer {
#  name: "fc1_color"
#  type: "InnerProduct"
#  bottom: "color"
#  top: "fc1_color"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  inner_product_param {
#    num_output: 128
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu1_color"
#  type: "PReLU"
#  bottom: "fc1_color"
#  top: "fc1_color"
##   relu_param {
##     negative_slope: 0.1
##   }
#}
#layer {
#  name: "fc2_color"
#  type: "InnerProduct"
#  bottom: "fc1_color"
#  top: "fc2_color"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  inner_product_param {
#    num_output: 128
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu2_color"
#  type: "PReLU"
#  bottom: "fc2_color"
#  top: "fc2_color"
##   relu_param {
##     negative_slope: 0.1
##   }
#}

layer {
  name: "fc1_transform"
  type: "InnerProduct"
  bottom: "transform"
  top: "fc1_transform"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_transform"
  type: "ReLU"
  bottom: "fc1_transform"
  top: "fc1_transform"
   relu_param {
     negative_slope: 0.1
   }
}
layer {
  name: "fc2_transform"
  type: "InnerProduct"
  bottom: "fc1_transform"
  top: "fc2_transform"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_transform"
  type: "ReLU"
  bottom: "fc2_transform"
  top: "fc2_transform"
   relu_param {
     negative_slope: 0.1
   }
}

layer {
  name: "concat"
  type: "Concat"
  bottom: "fc2_person"
  bottom: "fc2_emotion"
#  bottom: "fc2_color"
  bottom: "fc2_transform"
  top: "fc2"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "fc3"
  top: "fc3"
   relu_param {
     negative_slope: 0.1
   }
}
layer {
  name: "fc4"
  type: "InnerProduct"
  bottom: "fc3"
  top: "fc4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "fc4"
  top: "fc4"
   relu_param {
     negative_slope: 0.1
   }
}

layer {
  name: "fc5"
  type: "InnerProduct"
  bottom: "fc4"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 16384
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "fc5"
  top: "fc5"
   relu_param {
     negative_slope: 0.1
   }
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "fc5"
  top: "fc5_reshape"
  reshape_param {
     shape {
        dim: -1
        dim: 256
        dim: 8
        dim: 8
     }
  }
}

layer {
  name: "deconv6"
  type: "Deconvolution"
  bottom: "fc5_reshape"
  top: "deconv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu6"
  type: "ReLU"
  bottom: "deconv6"
  top: "deconv6"
  relu_param {
     negative_slope: 0.1
  }
}
#
#layer {
#  name: "conv6"
#  type: "Convolution"
#  bottom: "deconv6"
#  top: "deconv6"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  convolution_param {
#    num_output: 256
#    pad: 1
#    kernel_size: 3
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#
#layer {
#  name: "relu6_conv"
#  type: "ReLU"
#  bottom: "deconv6"
#  top: "deconv6"
#}

layer {
  name: "deconv7"
  type: "Deconvolution"
  bottom: "deconv6"
  top: "deconv7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 92
    pad: 1
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu7"
  type: "ReLU"
  bottom: "deconv7"
  top: "deconv7"
  relu_param {
     negative_slope: 0.1
   }
}


#layer {
#  name: "conv7"
#  type: "Convolution"
#  bottom: "deconv7"
#  top: "deconv7"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  convolution_param {
#    num_output: 92
#    pad: 1
#    kernel_size: 3
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#
#layer {
#  name: "relu7_conv"
#  type: "ReLU"
#  bottom: "deconv7"
#  top: "deconv7"
#}

#
layer {
  name: "deconv8_new"
  type: "Deconvolution"
  bottom: "deconv7"
  top: "deconv8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 92
    pad: 1
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "deconv8"
  top: "deconv8"
   relu_param {
     negative_slope: 0.1
   }
}
#
#layer {
#  name: "conv8"
#  type: "Convolution"
#  bottom: "deconv8"
#  top: "deconv8"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  convolution_param {
#    num_output: 92
#    pad: 1
#    kernel_size: 3
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#
#layer {
#  name: "relu8"
#  type: "ReLU"
#  bottom: "deconv8"
#  top: "deconv8"
#}
#
layer {
  name: "deconv9_new"
  type: "Deconvolution"
  bottom: "deconv8"
  top: "deconv9"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 3
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu9"
  type: "ReLU"
  bottom: "deconv9"
  top: "deconv9"
}

#layer {
#  name: "recon_data"
#  loss_weight: 1
#  type: "EuclideanLoss"
#  bottom: "deconv9"
#  bottom: "data"
#  top: "data_loss"
#}
#
#layer {
#  name: "deconv10"
#  type: "Convolution"
#  bottom: "deconv7"
#  top: "deconv10"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  convolution_param {
#    num_output: 2
#    pad: 0
#    kernel_size: 1
#    stride: 1
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#
#layer {
#  name: "segm_loss"
#  type: "SoftmaxWithLoss"
#  bottom: "deconv10"
#  bottom: "segm"
#  top: "Seg_loss"
#  loss_weight: 1
#}

